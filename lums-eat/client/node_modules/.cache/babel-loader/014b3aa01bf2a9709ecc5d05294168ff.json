{"ast":null,"code":"import isEmpty from \"is-empty\";\nexport const addItemToCart = (cartItems, cartItemToAdd) => new Promise((resolve, reject) => {\n  if (isEmpty(cartItems)) {\n    resolve(\"Item added to cart\");\n    return [...cartItems, { ...cartItemToAdd,\n      quantity: 1\n    }];\n  } else {\n    const existingCartItem = cartItems.find(cartItem => cartItem.ItemID === cartItemToAdd.ItemID);\n    let z;\n    cartItems.map(cartItem => cartItem.RestaurantID ? z = 2 : z = 1);\n\n    if (z === 1) {\n      resolve(\"Item added to cart\");\n      return [...cartItems, { ...cartItemToAdd,\n        quantity: 1\n      }];\n    }\n\n    if (existingCartItem) {\n      resolve(\"Item added to cart\");\n      return cartItems.map(cartItem => cartItem.ItemID === cartItemToAdd.ItemID ? { ...cartItem,\n        quantity: cartItem.quantity + 1\n      } : cartItem);\n    }\n\n    let a;\n    cartItems.map(cartItem => cartItem.RestaurantID === cartItemToAdd.RestaurantID ? a = 2 : a = 1);\n\n    if (a === 2) {\n      resolve(\"Item added to cart\");\n      return [...cartItems, { ...cartItemToAdd,\n        quantity: 1\n      }];\n    } else {\n      resolve(\"Items from other restaurants are in cart\");\n      return [...cartItems];\n    }\n  }\n});\nexport const removeItemFromCart = (cartItems, cartItemToRemove) => {\n  const existingCartItem = cartItems.find(cartItem => cartItem.ItemID === cartItemToRemove.ItemID);\n\n  if (existingCartItem.quantity === 1) {\n    return cartItems.filter(cartItem => cartItem.ItemID !== cartItemToRemove.ItemID);\n  }\n\n  return cartItems.map(cartItem => cartItem.ItemID === cartItemToRemove.ItemID ? { ...cartItem,\n    quantity: cartItem.quantity - 1\n  } : cartItem);\n};","map":{"version":3,"sources":["/home/hassan/Desktop/NEW/LUMS-Eat/lums-eat/client/src/redux/cart/cart.utils.js"],"names":["isEmpty","addItemToCart","cartItems","cartItemToAdd","Promise","resolve","reject","quantity","existingCartItem","find","cartItem","ItemID","z","map","RestaurantID","a","removeItemFromCart","cartItemToRemove","filter"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,UAApB;AAEA,OAAO,MAAMC,aAAa,GAAG,CAACC,SAAD,EAAYC,aAAZ,KAA+B,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAG3F,MAAGN,OAAO,CAACE,SAAD,CAAV,EAAsB;AACpBG,IAAAA,OAAO,CAAC,oBAAD,CAAP;AACA,WAAO,CAAC,GAAGH,SAAJ,EAAe,EAAE,GAAGC,aAAL;AAAoBI,MAAAA,QAAQ,EAAE;AAA9B,KAAf,CAAP;AACD,GAHD,MAII;AACF,UAAMC,gBAAgB,GAAGN,SAAS,CAACO,IAAV,CACvBC,QAAQ,IAAIA,QAAQ,CAACC,MAAT,KAAoBR,aAAa,CAACQ,MADvB,CAAzB;AAIA,QAAIC,CAAJ;AAEAV,IAAAA,SAAS,CAACW,GAAV,CAAcH,QAAQ,IACpBA,QAAQ,CAACI,YAAT,GAA0BF,CAAC,GAAG,CAA9B,GACKA,CAAC,GAAG,CAFX;;AAMA,QAAGA,CAAC,KAAG,CAAP,EAAS;AACPP,MAAAA,OAAO,CAAC,oBAAD,CAAP;AACA,aAAO,CAAC,GAAGH,SAAJ,EAAe,EAAE,GAAGC,aAAL;AAAoBI,QAAAA,QAAQ,EAAE;AAA9B,OAAf,CAAP;AACD;;AAED,QAAIC,gBAAJ,EAAsB;AACpBH,MAAAA,OAAO,CAAC,oBAAD,CAAP;AACA,aAAOH,SAAS,CAACW,GAAV,CAAcH,QAAQ,IAC3BA,QAAQ,CAACC,MAAT,KAAoBR,aAAa,CAACQ,MAAlC,GACK,EAAE,GAAGD,QAAL;AAAeH,QAAAA,QAAQ,EAAEG,QAAQ,CAACH,QAAT,GAAoB;AAA7C,OADL,GAEKG,QAHA,CAAP;AAKD;;AAED,QAAIK,CAAJ;AAEAb,IAAAA,SAAS,CAACW,GAAV,CAAcH,QAAQ,IACpBA,QAAQ,CAACI,YAAT,KAA0BX,aAAa,CAACW,YAAxC,GACKC,CAAC,GAAG,CADT,GAEKA,CAAC,GAAG,CAHX;;AAMA,QAAGA,CAAC,KAAG,CAAP,EAAS;AACPV,MAAAA,OAAO,CAAC,oBAAD,CAAP;AACA,aAAO,CAAC,GAAGH,SAAJ,EAAe,EAAE,GAAGC,aAAL;AAAoBI,QAAAA,QAAQ,EAAE;AAA9B,OAAf,CAAP;AACD,KAHD,MAII;AACFF,MAAAA,OAAO,CAAC,0CAAD,CAAP;AACA,aAAO,CAAC,GAAGH,SAAJ,CAAP;AACD;AACA;AACJ,CAnD2D,CAArD;AAqDP,OAAO,MAAMc,kBAAkB,GAAG,CAACd,SAAD,EAAYe,gBAAZ,KAAiC;AACjE,QAAMT,gBAAgB,GAAGN,SAAS,CAACO,IAAV,CACvBC,QAAQ,IAAIA,QAAQ,CAACC,MAAT,KAAoBM,gBAAgB,CAACN,MAD1B,CAAzB;;AAIA,MAAIH,gBAAgB,CAACD,QAAjB,KAA8B,CAAlC,EAAqC;AACnC,WAAOL,SAAS,CAACgB,MAAV,CAAiBR,QAAQ,IAAIA,QAAQ,CAACC,MAAT,KAAoBM,gBAAgB,CAACN,MAAlE,CAAP;AACD;;AAED,SAAOT,SAAS,CAACW,GAAV,CAAcH,QAAQ,IAC3BA,QAAQ,CAACC,MAAT,KAAoBM,gBAAgB,CAACN,MAArC,GACI,EAAE,GAAGD,QAAL;AAAeH,IAAAA,QAAQ,EAAEG,QAAQ,CAACH,QAAT,GAAoB;AAA7C,GADJ,GAEIG,QAHC,CAAP;AAKD,CAdM","sourcesContent":["import isEmpty from \"is-empty\";\n\nexport const addItemToCart = (cartItems, cartItemToAdd)  => new Promise((resolve, reject) => {\n\n  \n  if(isEmpty(cartItems)){\n    resolve(\"Item added to cart\")\n    return [...cartItems, { ...cartItemToAdd, quantity: 1}];\n  }\n  else{    \n    const existingCartItem = cartItems.find(\n      cartItem => cartItem.ItemID === cartItemToAdd.ItemID\n    );\n\n    let z\n\n    cartItems.map(cartItem =>\n      cartItem.RestaurantID  ? (z = 2)\n        : (z = 1)\n    );\n\n    \n    if(z===1){\n      resolve(\"Item added to cart\")\n      return [...cartItems, { ...cartItemToAdd, quantity: 1}];\n    }\n      \n    if (existingCartItem) {\n      resolve(\"Item added to cart\")\n      return cartItems.map(cartItem =>\n        cartItem.ItemID === cartItemToAdd.ItemID\n          ? ({ ...cartItem, quantity: cartItem.quantity + 1 })\n          : (cartItem)\n      );\n    }\n\n    let a\n\n    cartItems.map(cartItem =>\n      cartItem.RestaurantID === cartItemToAdd.RestaurantID\n        ? (a = 2)\n        : (a = 1)\n    );\n  \n    if(a===2){\n      resolve(\"Item added to cart\")\n      return [...cartItems, { ...cartItemToAdd, quantity: 1 }];\n    }\n    else{\n      resolve(\"Items from other restaurants are in cart\")\n      return [...cartItems];\n    }\n    }\n});\n\nexport const removeItemFromCart = (cartItems, cartItemToRemove) => {\n  const existingCartItem = cartItems.find(\n    cartItem => cartItem.ItemID === cartItemToRemove.ItemID\n  );\n\n  if (existingCartItem.quantity === 1) {\n    return cartItems.filter(cartItem => cartItem.ItemID !== cartItemToRemove.ItemID);\n  }\n\n  return cartItems.map(cartItem =>\n    cartItem.ItemID === cartItemToRemove.ItemID\n      ? { ...cartItem, quantity: cartItem.quantity - 1 }\n      : cartItem\n  );\n};\n"]},"metadata":{},"sourceType":"module"}