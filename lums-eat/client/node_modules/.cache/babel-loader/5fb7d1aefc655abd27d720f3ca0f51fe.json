{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\"; // Register User\n\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post(\"/users/register\", userData).then(res => history.push(\"/login\")) // re-direct to login on successful register\n  .catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n};\nexport const changeInfo = (userData, history) => dispatch => {\n  axios.post(\"/users/changeinfo\", userData).then(res => {\n    console.log(res.data); // history.push(\"/\")\n  }) // re-direct to login on successful register\n  .catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n};\nexport const changePass = (userData, history) => dispatch => {\n  axios.post(\"/users/changepass\", userData).then(res => {\n    console.log(res.data); // history.push(\"/\")\n  }) // re-direct to login on successful register\n  .catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Login - get user token\n\nexport const loginUser = userData => dispatch => {\n  axios.post(\"/users/login\", userData).then(res => {\n    // Save to localStorage\n    // Set token to localStorage\n    console.log(res.data);\n    const {\n      token\n    } = res.data;\n    const {\n      email\n    } = res.data;\n    const {\n      userID\n    } = res.data;\n    const {\n      name\n    } = res.data;\n    const {\n      isRest\n    } = res.data;\n    const {\n      restID\n    } = res.data;\n    const {\n      address\n    } = res.data;\n    const {\n      number\n    } = res.data; // console.log(\"isRest\", isRest)\n\n    if (isRest) {\n      localStorage.setItem(\"jwtToken\", token);\n      localStorage.setItem(\"RestaurantID\", restID);\n      localStorage.setItem(\"email\", email);\n      localStorage.setItem(\"name\", name);\n      localStorage.setItem(\"isRest\", isRest);\n    } else {\n      localStorage.setItem(\"jwtToken\", token);\n      localStorage.setItem(\"userID\", userID);\n      localStorage.setItem(\"email\", email);\n      localStorage.setItem(\"name\", name);\n      localStorage.setItem(\"address\", address);\n      localStorage.setItem(\"number\", number);\n    }\n\n    console.log(localStorage); // Set token to Auth header\n\n    setAuthToken(token); // Decode token to get user data\n\n    const decoded = jwt_decode(token); // Set current user\n\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Set logged in user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\n\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport const logoutUser = () => dispatch => new Promise((resolve, reject) => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\");\n  localStorage.removeItem(\"email\");\n  localStorage.removeItem(\"name\");\n  localStorage.removeItem(\"userID\");\n  localStorage.removeItem(\"isRest\");\n  localStorage.removeItem(\"RestaurantID\");\n  localStorage.removeItem(\"address\");\n  localStorage.removeItem(\"number\"); // Remove auth header for future requests\n\n  setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n  dispatch(setCurrentUser({}));\n  resolve(\"done\");\n});","map":{"version":3,"sources":["/home/hassan/Desktop/NEW/LUMS-Eat/lums-eat/client/src/redux/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","registerUser","userData","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","changeInfo","console","log","changePass","loginUser","token","email","userID","name","isRest","restID","address","number","localStorage","setItem","decoded","setCurrentUser","setUserLoading","logoutUser","Promise","resolve","reject","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SACEC,UADF,EAEEC,gBAFF,EAGEC,YAHF,QAIO,SAJP,C,CAMA;;AACA,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuBC,QAAQ,IAAI;AAC7DT,EAAAA,KAAK,CACFU,IADH,CACQ,iBADR,EAC2BH,QAD3B,EAEGI,IAFH,CAEQC,GAAG,IAAIJ,OAAO,CAACK,IAAR,CAAa,QAAb,CAFf,EAEuC;AAFvC,GAGGC,KAHH,CAGSC,GAAG,IACRN,QAAQ,CAAC;AACPO,IAAAA,IAAI,EAAEb,UADC;AAEPc,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,GAAD,CAJZ;AASD,CAVM;AAYP,OAAO,MAAMC,UAAU,GAAG,CAACb,QAAD,EAAWC,OAAX,KAAuBC,QAAQ,IAAI;AAC3DT,EAAAA,KAAK,CACFU,IADH,CACQ,mBADR,EAC6BH,QAD7B,EAEGI,IAFH,CAEQC,GAAG,IAAI;AACXS,IAAAA,OAAO,CAACC,GAAR,CAAYV,GAAG,CAACO,IAAhB,EADW,CAEX;AACD,GALH,EAKK;AALL,GAMGL,KANH,CAMSC,GAAG,IACRN,QAAQ,CAAC;AACPO,IAAAA,IAAI,EAAEb,UADC;AAEPc,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,GAAD,CAPZ;AAYD,CAbM;AAeP,OAAO,MAAMI,UAAU,GAAG,CAAChB,QAAD,EAAWC,OAAX,KAAuBC,QAAQ,IAAI;AAC3DT,EAAAA,KAAK,CACFU,IADH,CACQ,mBADR,EAC6BH,QAD7B,EAEGI,IAFH,CAEQC,GAAG,IAAI;AACXS,IAAAA,OAAO,CAACC,GAAR,CAAYV,GAAG,CAACO,IAAhB,EADW,CAEX;AACD,GALH,EAKK;AALL,GAMGL,KANH,CAMSC,GAAG,IACRN,QAAQ,CAAC;AACPO,IAAAA,IAAI,EAAEb,UADC;AAEPc,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,GAAD,CAPZ;AAYD,CAbM,C,CAeP;;AACA,OAAO,MAAMK,SAAS,GAAGjB,QAAQ,IAAIE,QAAQ,IAAI;AAC/CT,EAAAA,KAAK,CACFU,IADH,CACQ,cADR,EACwBH,QADxB,EAEGI,IAFH,CAEQC,GAAG,IAAI;AACX;AACA;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAYV,GAAG,CAACO,IAAhB;AACA,UAAM;AAAEM,MAAAA;AAAF,QAAYb,GAAG,CAACO,IAAtB;AACA,UAAM;AAAEO,MAAAA;AAAF,QAAYd,GAAG,CAACO,IAAtB;AACA,UAAM;AAAEQ,MAAAA;AAAF,QAAaf,GAAG,CAACO,IAAvB;AACA,UAAM;AAAES,MAAAA;AAAF,QAAWhB,GAAG,CAACO,IAArB;AACA,UAAM;AAAEU,MAAAA;AAAF,QAAajB,GAAG,CAACO,IAAvB;AACA,UAAM;AAAEW,MAAAA;AAAF,QAAalB,GAAG,CAACO,IAAvB;AACA,UAAM;AAAEY,MAAAA;AAAF,QAAcnB,GAAG,CAACO,IAAxB;AACA,UAAM;AAAEa,MAAAA;AAAF,QAAapB,GAAG,CAACO,IAAvB,CAXW,CAaX;;AACA,QAAGU,MAAH,EAAU;AACRI,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCT,KAAjC;AACAQ,MAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCJ,MAArC;AACAG,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BR,KAA9B;AACAO,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BN,IAA7B;AACAK,MAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+BL,MAA/B;AACD,KAND,MAOI;AACFI,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCT,KAAjC;AACAQ,MAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+BP,MAA/B;AACAM,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BR,KAA9B;AACAO,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BN,IAA7B;AACAK,MAAAA,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgCH,OAAhC;AACAE,MAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+BF,MAA/B;AACD;;AAIDX,IAAAA,OAAO,CAACC,GAAR,CAAYW,YAAZ,EAhCW,CAiCX;;AACAhC,IAAAA,YAAY,CAACwB,KAAD,CAAZ,CAlCW,CAmCX;;AACA,UAAMU,OAAO,GAAGjC,UAAU,CAACuB,KAAD,CAA1B,CApCW,CAqCX;;AACAhB,IAAAA,QAAQ,CAAC2B,cAAc,CAACD,OAAD,CAAf,CAAR;AACD,GAzCH,EA0CGrB,KA1CH,CA0CSC,GAAG,IACRN,QAAQ,CAAC;AACPO,IAAAA,IAAI,EAAEb,UADC;AAEPc,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,GAAD,CA3CZ;AAgDD,CAjDM,C,CAkDP;;AACA,OAAO,MAAMiB,cAAc,GAAGD,OAAO,IAAI;AACvC,SAAO;AACLnB,IAAAA,IAAI,EAAEZ,gBADD;AAELa,IAAAA,OAAO,EAAEkB;AAFJ,GAAP;AAID,CALM,C,CAMP;;AACA,OAAO,MAAME,cAAc,GAAG,MAAM;AAClC,SAAO;AACLrB,IAAAA,IAAI,EAAEX;AADD,GAAP;AAGD,CAJM,C,CAKP;;AACA,OAAO,MAAMiC,UAAU,GAAG,MAAM7B,QAAQ,IAAI,IAAI8B,OAAJ,CAAa,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC5E;AACAR,EAAAA,YAAY,CAACS,UAAb,CAAwB,UAAxB;AACAT,EAAAA,YAAY,CAACS,UAAb,CAAwB,OAAxB;AACAT,EAAAA,YAAY,CAACS,UAAb,CAAwB,MAAxB;AACAT,EAAAA,YAAY,CAACS,UAAb,CAAwB,QAAxB;AACAT,EAAAA,YAAY,CAACS,UAAb,CAAwB,QAAxB;AACAT,EAAAA,YAAY,CAACS,UAAb,CAAwB,cAAxB;AACAT,EAAAA,YAAY,CAACS,UAAb,CAAwB,SAAxB;AACAT,EAAAA,YAAY,CAACS,UAAb,CAAwB,QAAxB,EAT4E,CAU5E;;AACAzC,EAAAA,YAAY,CAAC,KAAD,CAAZ,CAX4E,CAY5E;;AACAQ,EAAAA,QAAQ,CAAC2B,cAAc,CAAC,EAAD,CAAf,CAAR;AACAI,EAAAA,OAAO,CAAC,MAAD,CAAP;AACD,CAf2C,CAArC","sourcesContent":["import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport {\n  GET_ERRORS,\n  SET_CURRENT_USER,\n  USER_LOADING\n} from \"./types\";\n\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n  axios\n    .post(\"/users/register\", userData)\n    .then(res => history.push(\"/login\")) // re-direct to login on successful register\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\nexport const changeInfo = (userData, history) => dispatch => {\n  axios\n    .post(\"/users/changeinfo\", userData)\n    .then(res => {\n      console.log(res.data)\n      // history.push(\"/\")\n    }) // re-direct to login on successful register\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\nexport const changePass = (userData, history) => dispatch => {\n  axios\n    .post(\"/users/changepass\", userData)\n    .then(res => {\n      console.log(res.data)\n      // history.push(\"/\")\n    }) // re-direct to login on successful register\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n// Login - get user token\nexport const loginUser = userData => dispatch => {\n  axios\n    .post(\"/users/login\", userData)\n    .then(res => {\n      // Save to localStorage\n      // Set token to localStorage\n      console.log(res.data)\n      const { token } = res.data; \n      const { email } = res.data;\n      const { userID } = res.data;\n      const { name } = res.data;\n      const { isRest } = res.data;\n      const { restID } = res.data;\n      const { address } = res.data;\n      const { number } = res.data;\n\n      // console.log(\"isRest\", isRest)\n      if(isRest){\n        localStorage.setItem(\"jwtToken\", token);\n        localStorage.setItem(\"RestaurantID\", restID);\n        localStorage.setItem(\"email\", email);\n        localStorage.setItem(\"name\", name);\n        localStorage.setItem(\"isRest\", isRest);\n      }\n      else{\n        localStorage.setItem(\"jwtToken\", token);\n        localStorage.setItem(\"userID\", userID);\n        localStorage.setItem(\"email\", email);\n        localStorage.setItem(\"name\", name);\n        localStorage.setItem(\"address\", address);\n        localStorage.setItem(\"number\", number);\n      }\n      \n\n\n      console.log(localStorage)\n      // Set token to Auth header\n      setAuthToken(token);\n      // Decode token to get user data\n      const decoded = jwt_decode(token);\n      // Set current user\n      dispatch(setCurrentUser(decoded));\n    })\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n// Set logged in user\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n// User loading\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n};\n// Log user out\nexport const logoutUser = () => dispatch => new Promise ((resolve, reject) => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\");\n  localStorage.removeItem(\"email\");\n  localStorage.removeItem(\"name\");\n  localStorage.removeItem(\"userID\");\n  localStorage.removeItem(\"isRest\");\n  localStorage.removeItem(\"RestaurantID\");\n  localStorage.removeItem(\"address\");\n  localStorage.removeItem(\"number\");\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to empty object {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}));\n  resolve(\"done\")\n});"]},"metadata":{},"sourceType":"module"}