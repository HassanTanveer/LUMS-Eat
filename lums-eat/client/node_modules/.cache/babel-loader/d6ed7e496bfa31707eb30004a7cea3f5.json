{"ast":null,"code":"import axios from\"axios\";import setAuthToken from\"../utils/setAuthToken\";import jwt_decode from\"jwt-decode\";import{GET_ERRORS,SET_CURRENT_USER,USER_LOADING}from\"./types\";// Register User\nexport var registerUser=function registerUser(userData,history){return function(dispatch){axios.post(\"/users/register\",userData).then(function(res){return history.push(\"/login\");})// re-direct to login on successful register\n.catch(function(err){return dispatch({type:GET_ERRORS,payload:err.response.data});});};};// Login - get user token\nexport var loginUser=function loginUser(userData){return function(dispatch){axios.post(\"/users/login\",userData).then(function(res){// Save to localStorage\n// Set token to localStorage\nconsole.log(res.data);var token=res.data.token;var email=res.data.email;var userID=res.data.userID;var name=res.data.name;var isRest=res.data.isRest;var restID=res.data.restID;var address=res.data.address;var number=res.data.number;// console.log(\"isRest\", isRest)\nif(isRest){localStorage.setItem(\"jwtToken\",token);localStorage.setItem(\"RestaurantID\",restID);localStorage.setItem(\"email\",email);localStorage.setItem(\"name\",name);localStorage.setItem(\"isRest\",isRest);}else{localStorage.setItem(\"jwtToken\",token);localStorage.setItem(\"userID\",userID);localStorage.setItem(\"email\",email);localStorage.setItem(\"name\",name);localStorage.setItem(\"address\",address);localStorage.setItem(\"number\",number);}console.log(localStorage);// Set token to Auth header\nsetAuthToken(token);// Decode token to get user data\nvar decoded=jwt_decode(token);// Set current user\ndispatch(setCurrentUser(decoded));}).catch(function(err){return dispatch({type:GET_ERRORS,payload:err.response.data});});};};// Set logged in user\nexport var setCurrentUser=function setCurrentUser(decoded){return{type:SET_CURRENT_USER,payload:decoded};};// User loading\nexport var setUserLoading=function setUserLoading(){return{type:USER_LOADING};};// Log user out\nexport var logoutUser=function logoutUser(){return function(dispatch){return new Promise(function(resolve,reject){// Remove token from local storage\nlocalStorage.removeItem(\"jwtToken\");localStorage.removeItem(\"email\");localStorage.removeItem(\"name\");localStorage.removeItem(\"userID\");localStorage.removeItem(\"isRest\");localStorage.removeItem(\"RestaurantID\");localStorage.removeItem(\"address\");localStorage.removeItem(\"number\");// Remove auth header for future requests\nsetAuthToken(false);// Set current user to empty object {} which will set isAuthenticated to false\ndispatch(setCurrentUser({}));resolve(\"done\");});};};","map":{"version":3,"sources":["/home/hassan/Desktop/NEW/LUMS-Eat/lums-eat/client/src/redux/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","registerUser","userData","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","loginUser","console","log","token","email","userID","name","isRest","restID","address","number","localStorage","setItem","decoded","setCurrentUser","setUserLoading","logoutUser","Promise","resolve","reject","removeItem"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport {\n  GET_ERRORS,\n  SET_CURRENT_USER,\n  USER_LOADING\n} from \"./types\";\n\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n  axios\n    .post(\"/users/register\", userData)\n    .then(res => history.push(\"/login\")) // re-direct to login on successful register\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n// Login - get user token\nexport const loginUser = userData => dispatch => {\n  axios\n    .post(\"/users/login\", userData)\n    .then(res => {\n      // Save to localStorage\n      // Set token to localStorage\n      console.log(res.data)\n      const { token } = res.data; \n      const { email } = res.data;\n      const { userID } = res.data;\n      const { name } = res.data;\n      const { isRest } = res.data;\n      const { restID } = res.data;\n      const { address } = res.data;\n      const { number } = res.data;\n\n      // console.log(\"isRest\", isRest)\n      if(isRest){\n        localStorage.setItem(\"jwtToken\", token);\n        localStorage.setItem(\"RestaurantID\", restID);\n        localStorage.setItem(\"email\", email);\n        localStorage.setItem(\"name\", name);\n        localStorage.setItem(\"isRest\", isRest);\n      }\n      else{\n        localStorage.setItem(\"jwtToken\", token);\n        localStorage.setItem(\"userID\", userID);\n        localStorage.setItem(\"email\", email);\n        localStorage.setItem(\"name\", name);\n        localStorage.setItem(\"address\", address);\n        localStorage.setItem(\"number\", number);\n      }\n      \n\n\n      console.log(localStorage)\n      // Set token to Auth header\n      setAuthToken(token);\n      // Decode token to get user data\n      const decoded = jwt_decode(token);\n      // Set current user\n      dispatch(setCurrentUser(decoded));\n    })\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n// Set logged in user\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n// User loading\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n};\n// Log user out\nexport const logoutUser = () => dispatch => new Promise ((resolve, reject) => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\");\n  localStorage.removeItem(\"email\");\n  localStorage.removeItem(\"name\");\n  localStorage.removeItem(\"userID\");\n  localStorage.removeItem(\"isRest\");\n  localStorage.removeItem(\"RestaurantID\");\n  localStorage.removeItem(\"address\");\n  localStorage.removeItem(\"number\");\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to empty object {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}));\n  resolve(\"done\")\n});"]},"metadata":{},"sourceType":"module"}