{"ast":null,"code":"var _jsxFileName = \"/home/hassan/Desktop/NEW/LUMS-Eat/lums-eat/client/src/components/placeorder/placeorder.jsx\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from 'reselect';\nimport { withRouter } from 'react-router-dom';\nimport CustomButton from '../../components/custom-button/custom-button.components';\nimport axios from \"axios\";\nimport { selectCartItems } from '../../redux/cart/cart.selectors';\nimport { clearItemFromCart } from '../../redux/cart/cart.actions';\n\nclass PlaceOrder extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.orders1 = (newOrder, history) => dispatch => {\n      console.log(newOrder);\n      axios.post(\"/orders/add\", newOrder).then(res => history.push(\"/orders\")); // re-direct to login on successful register\n    };\n\n    this.onOrder = e => {\n      e.preventDefault(); // console.log(this.props.items)\n\n      var item = this.props.items;\n      const newOrder = {\n        OrderID: Math.random().toString(36).substr(2, 9),\n        userID: localStorage.userID,\n        userContact: localStorage.userContact,\n        userName: localStorage.name,\n        items: this.props.items,\n        RestaurantID: item[0].RestaurantID,\n        address: localStorage.address,\n        total: this.props.total,\n        number: localStorage.number,\n        status: \"New\"\n      };\n      axios.post(\"/orders/add\", newOrder).then(res => this.props.history.push(\"/orders\"));\n      this.props.cartItems.map(item => this.props.clearItem(item)); //console.log(newOrder)\n      //this.orders1(newOrder, this.props.history)\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(CustomButton, {\n      onClick: this.onOrder,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, \" Place Order  \");\n  }\n\n}\n\nPlaceOrder.propTypes = {\n  orders: PropTypes.func.isRequired,\n  errors: PropTypes.object.isRequired\n};\nconst mapStateToProps = createStructuredSelector({\n  cartItems: selectCartItems\n});\n\nconst mapDispatchToProps = dispatch => ({\n  clearItem: item => dispatch(clearItemFromCart(item))\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(PlaceOrder));","map":{"version":3,"sources":["/home/hassan/Desktop/NEW/LUMS-Eat/lums-eat/client/src/components/placeorder/placeorder.jsx"],"names":["React","Component","PropTypes","connect","createStructuredSelector","withRouter","CustomButton","axios","selectCartItems","clearItemFromCart","PlaceOrder","orders1","newOrder","history","dispatch","console","log","post","then","res","push","onOrder","e","preventDefault","item","props","items","OrderID","Math","random","toString","substr","userID","localStorage","userContact","userName","name","RestaurantID","address","total","number","status","cartItems","map","clearItem","render","propTypes","orders","func","isRequired","errors","object","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\nimport { createStructuredSelector } from 'reselect';\n import { withRouter } from 'react-router-dom';\n  import CustomButton from '../../components/custom-button/custom-button.components'\n  import axios from \"axios\";\n\n  import {\n    selectCartItems\n  \n  } from '../../redux/cart/cart.selectors';\n  \n  import {\n    clearItemFromCart\n    \n  } from '../../redux/cart/cart.actions';\n\n\nclass PlaceOrder extends Component { \n  \n    orders1 = (newOrder, history) => dispatch => {\n        console.log(newOrder)\n        \n     axios\n      .post(\"/orders/add\", newOrder)\n      .then(res => history.push(\"/orders\")) // re-direct to login on successful register\n      \n\n      \n  };\n  \n   onOrder = e => {\n    e.preventDefault(); \n   // console.log(this.props.items)\n   var item= this.props.items\n\n   const newOrder = {\n    OrderID : Math.random().toString(36).substr(2, 9),\n    userID: localStorage.userID,\n    userContact: localStorage.userContact,\n    userName: localStorage.name,\n    items: this.props.items,\n    RestaurantID: item[0].RestaurantID,\n    address: localStorage.address,\n    total: this.props.total,\n    number: localStorage.number,\n    status : \"New\"\n  };\n\n  axios\n      .post(\"/orders/add\", newOrder)\n      .then(res => this.props.history.push(\"/orders\"))\n\n      this.props.cartItems.map(item => (\n        this.props.clearItem(item)\n        ))\n\n  //console.log(newOrder)\n\n\n  //this.orders1(newOrder, this.props.history)\n\n  \n   }\n    \n    \n\n\n  render() {\n \n   \n    \n   \n    \n    return (\n      \n        <CustomButton  onClick = {this.onOrder } > Place Order  </CustomButton>\n    \n     \n   \n    );\n      \n  };\n}\n\nPlaceOrder.propTypes = {\n    orders: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired\n  };\n\n  const mapStateToProps = createStructuredSelector({\n    cartItems: selectCartItems\n    \n    \n  });\n  \n  const mapDispatchToProps = dispatch => ({\n    \n    clearItem : item => dispatch(clearItemFromCart(item))\n  });\n\n  export default withRouter(connect(\n    mapStateToProps, mapDispatchToProps\n  )(PlaceOrder));\n  \n\n  \n\n"]},"metadata":{},"sourceType":"module"}