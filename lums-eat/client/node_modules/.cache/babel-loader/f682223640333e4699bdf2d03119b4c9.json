{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\"; // Register User\n\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post(\"/users/register\", userData).then(res => history.push(\"/login\")) // re-direct to login on successful register\n  .catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Login - get user token\n\nexport const loginUser = userData => dispatch => {\n  axios.post(\"/users/login\", userData).then(res => {\n    // Save to localStorage\n    // Set token to localStorage\n    // console.log(res.data)\n    const {\n      token\n    } = res.data;\n    const {\n      email\n    } = res.data;\n    const {\n      userID\n    } = res.data;\n    const {\n      name\n    } = res.data;\n    const {\n      isRest\n    } = res.data.isRest;\n    localStorage.setItem(\"isRest\", isRest);\n    localStorage.setItem(\"jwtToken\", token);\n    localStorage.setItem(\"email\", email);\n    localStorage.setItem(\"userID\", userID);\n    localStorage.setItem(\"name\", name);\n    console.log(localStorage); // Set token to Auth header\n\n    setAuthToken(token); // Decode token to get user data\n\n    const decoded = jwt_decode(token); // Set current user\n\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Set logged in user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\n\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport const logoutUser = () => dispatch => new Promise((resolve, reject) => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\");\n  localStorage.removeItem(\"email\");\n  localStorage.removeItem(\"name\");\n  localStorage.removeItem(\"userID\");\n  localStorage.removeItem(\"isRest\"); // Remove auth header for future requests\n\n  setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n  dispatch(setCurrentUser({}));\n  resolve(\"done\");\n});","map":{"version":3,"sources":["/home/hassan/Desktop/NEW/LUMS-Eat/lums-eat/client/src/redux/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","registerUser","userData","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","loginUser","token","email","userID","name","isRest","localStorage","setItem","console","log","decoded","setCurrentUser","setUserLoading","logoutUser","Promise","resolve","reject","removeItem"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport {\n  GET_ERRORS,\n  SET_CURRENT_USER,\n  USER_LOADING\n} from \"./types\";\n\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n  axios\n    .post(\"/users/register\", userData)\n    .then(res => history.push(\"/login\")) // re-direct to login on successful register\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n// Login - get user token\nexport const loginUser = userData => dispatch => {\n  axios\n    .post(\"/users/login\", userData)\n    .then(res => {\n      // Save to localStorage\n      // Set token to localStorage\n      // console.log(res.data)\n      const { token } = res.data;\n      const { email } = res.data;\n      const { userID } = res.data;\n      const { name } = res.data;\n      const { isRest } = res.data.isRest;\n\n      localStorage.setItem(\"isRest\", isRest);\n      localStorage.setItem(\"jwtToken\", token);\n      localStorage.setItem(\"email\", email);\n      localStorage.setItem(\"userID\", userID);\n      localStorage.setItem(\"name\", name);\n\n      console.log(localStorage)\n      // Set token to Auth header\n      setAuthToken(token);\n      // Decode token to get user data\n      const decoded = jwt_decode(token);\n      // Set current user\n      dispatch(setCurrentUser(decoded));\n    })\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n// Set logged in user\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n// User loading\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n};\n// Log user out\nexport const logoutUser = () => dispatch => new Promise ((resolve, reject) => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\");\n  localStorage.removeItem(\"email\");\n  localStorage.removeItem(\"name\");\n  localStorage.removeItem(\"userID\");\n  localStorage.removeItem(\"isRest\");\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to empty object {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}));\n  resolve(\"done\")\n});"]},"metadata":{},"sourceType":"module"}